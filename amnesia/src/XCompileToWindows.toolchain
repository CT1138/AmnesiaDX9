# The name of the target operating system
set(CMAKE_SYSTEM_NAME Windows)

# Which compilers to use for C and C++
# Uncomment these lines for 64-bit compilation, though these are set for a 32-bit Windows environment
# set(CMAKE_C_COMPILER   x86_64-w64-mingw32-gcc-win32)  # 64-bit GCC compiler, targeting 32-bit Windows
# set(CMAKE_CXX_COMPILER x86_64-w64-mingw32-g++-win32)  # 64-bit G++ compiler

# Use these lines for 32-bit compilation
set(CMAKE_C_COMPILER   i686-w64-mingw32-gcc-win32)     # 32-bit GCC compiler
set(CMAKE_CXX_COMPILER i686-w64-mingw32-g++-win32)     # 32-bit G++ compiler

# These options force 32-bit compilation, which shouldn't be necessary as the compilers specified are already for 32-bit
# add_compile_options(-m32)
# add_link_options(-m32)

# Specify where the target environment is located
set(CMAKE_FIND_ROOT_PATH /usr/i686-w64-mingw32/)

# Adjust the default behavior of the FIND_XXX() commands:
# Note: These settings are crucial for cross-compilation and should be set carefully

# Search programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# Search headers and libraries in both the host and target environments
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)

